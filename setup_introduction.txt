16th Oct, 2024

1. Open terminal for the project folder (ctrl + shift + ~)
2. Check for python avaiable (python --version)
3. Check for pip (pip --version)
4. We need to install Django (pip install django)
5. Create basic django project (django-admin startproject <projectname>)            --> we had used sample



1. Open the terminal for the project folder
    -> terminal -> new terminal
    or
    -> ctrl + shift + ~
2. check for the python availability(python --version)
3. check for the pip (pip --version)
4. We need to install django in our folder
    pip install django
    sucessfully installed the requrirements asgiref-3.8.1 django-5.1.2
5. we need to create a basic django project -> 'sample'
    django-admin startproject projectname
 
What is Django?
    -> Free & Opensource framework for building web applications with python.
 
what is framework?
    -> we are going to use a new package, that are already available in the technology
    -> collection of resources that are useful for the deveopers to complete the much easier.
applications?
    -> we need to install separate technologies that are used for the projects
 
Why we need to use django?
    -> less codes
    -> less time to create and complete the project
 
Companies that are using django for their projects:
    -> Youtube
    -> Instagram
    -> Spotify
    -> DropBox
 
Advantages of using django:
    -> it will have a inbuilt admin site
    -> ORM (Object Relational Mapper)
        -> tool used to connect the programming code and database
    -> Authentication
    -> Caching/cookies
 
manage.py file
    -> is the main file for our djang project
    -> used to run the server for our project
 
settings.py file
    -> used to store some pre-required applications for our django project
    -> admin - have the admin access for our project
    -> auth - commands for our authentication purpose
    -> if you want to create a new app, then you need to link that app to our settings.py
 
urls.py file
    -> used for the navigation or routing methods
 
How to run the django project?
1. move the terminal to our project file
    cd sample
2. write the run command to run our django project in the server
    python manage.py runserver




17th Oct,2024

We have to create a sample web page in our django project.
1. we need to create a new application for our django project.
    -> because the apps which we are going to create, will act as the web page.
    -> in django, when we create a new web page, we can't create it directly, we need to create it as app.
 
To stop the server, press ctrl + C
 
    first we need to create a app in our django project
    -> to create a app, we need to use the admin command as 'startapp'
        django-admin startapp appname
 
        django-admin startapp demopage
inside that demopage, we will have lot of python files like main project folder
 
views.py file:
    used to display the web page or used to export the web page, which we have created to our main project folder 'sample'
    -> will have only functions inside it.
 
how to create a function in python:
    def functionName(arguments):
        statement
        return ->
 
2. We are create the web page with the help of html file.
    1. we need to create a new folder with the name 'templates' inside our demopage app.
    2. inside the templates folder, create a new file with the name as 'index.html'
    3. After creating the html file, fill your html tags and codes.
 
if you are going to start the html codes, we need to have from predefined structure of html page.
    1. type ! symbol and press enter or tab space
    2. fill the code
 
3. link the app folder and main project folder
    1. we need to complete the code in views.py
    2. inside views.py create a function with the name as 'home' with an argument called as 'request'.
    3. inside the function, return the web page, which you want to display as output.
        -> we need to use a function render(), this render function is used to open your web page as output.
        -> render() will have 2 arguments, one is request and another one is the web page name, which you want to open.
4. After filling the views.py code, jump to our main project folder.
    1. we are going to install our new app 'demopage' inside our main folder.
        -> we needs to open the settings.py
        -> go to installed_app and add your new app name at the last with comma
            'demopage',
    2. we need to create a url for our new html page
        -> we need to open urls.py
        -> go to urlspattern and create a new path for your new html page.
 
        syntax:
        path('urlname',function call to views.py,name of html page)
 
        path('',views.home,name='index')
 
        -> import the views from demopage
            from demopage import views
 
5. we can stop the server and re-run the server or we can reload the current server
 
As of now use internal css for styling





18th October, 2024

Create a new django project and create 3 html files, home page, login page and registration page
 






22nd October,2024

 -> CSRF Token is 

 Database:
    -> sqliteonline.com
    -> open the db.sqlite3 file from your project, for the first time, it will be empty.
 
in the terminal, run the command
    -> python manage.py migrate
        -> it will include all the predefiend database tables to our db.sqlite3.
 
auth_group table:
    -> used to store the details of the group of peoples, who are all registered and using our site.
    -> admin,agent,user,dummy
 
auth_user table:
    -> used to store the predefined input tags of html command
    -> username
    -> password
    -> firstname
    -> lastname
    -> dob








23th October,2024

In profile.html, we need to add 1 input tag as type image and one submit button
 











11th November, 2024

OpenCV implementation for image processing

def profile(request):
    if(request.method=="POST"):
        img_name = request.FILES.get('uploadImage')
        print(img_name)
        return render(request,'profile.html',{'img':img_name})
    else:
        return render(request,'profile.html')



12th November, 2024

<body>
    <h1>Welcome to Skin Disease Finding Web App!!!</h1>
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        Image Upload: <input type="file" name="uploadImage"><br>
        <button type="submit">Submit</button>
    </form>
    <hr>
    <div>
        {% if img %}
            <img src="{{img}}" alt="No Image loaded" height="500px" width="500px">
        {% endif %}
    </div>
</body>


--> case 64 method <--

if(request.method=="POST"):
        if(request.FILES.get('uploadImage')):
            img_name = request.FILES['uploadImage'].read()
            encode = base64.b64encode(img_name).decode('utf-8')
            img_url = f"data:image/jpeg;base64,{encode}"
            return render(request,'profile.html',{'img':img_url})
    else:
        return render(request,'profile.html')




Another method to load the images, with saving it. below is the codes
 
Add the media details in settings.py 
 
MEDIA_URL ='/media/'
MEDIA_ROOT = BASE_DIR/'media'
 
Add the media url to the urls.py
 
from django.conf import settings
from django.conf.urls.static import static
 
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)
 

views.py
 
if(request.method=="POST"):
        if(request.FILES.get('uploadImage')):
            img_name = request.FILES['uploadImage']
            # create a variable for our FileSystem package
            fs = FileSystemStorage()
            filename = fs.save(img_name.name,img_name)
            #urls
            img_url = fs.url(filename)
            return render(request,'profile.html',{'img':img_url})
    else:
        return render(request,'profile.html')




13th November, 2024

Task:
Read the image from the user and use opencv to convert the image to the needed calculation.




14th November, 2024

-> mention in ppt

--> for milestone 2 -> it's the learing of opecv for image processing , edge detection using canny algorithm
--> this is the milestone 3 -> it's the implementation of opencv for image processing
get image from user fromm ui part

get the dimenstion for the image


--> SEND BY SIR  <--

Milestone 3, implementing the UI to read an image from user, process that image with opencv to calculate the dimensions of the skin disease area in UI back
 












21th November, 2024


 learning model code:
 
import os
import numpy as np
import cv2
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC  # Support Vector Machine for classification
from sklearn.metrics import accuracy_score
from joblib import dump, load  # For saving/loading models
 
# Paths
data_dir = 'skin-disease-datasaet/train_set'
classes = os.listdir(data_dir)
 
# Parameters
img_height, img_width = 64, 64  # Resize images to this size
 
# Load dataset
X = []
y = []
 
for label, class_name in enumerate(classes):
    class_dir = os.path.join(data_dir, class_name)
    for img_name in os.listdir(class_dir):
        img_path = os.path.join(class_dir, img_name)
        img = cv2.imread(img_path, cv2.IMREAD_COLOR)
        img = cv2.resize(img, (img_width, img_height))  # Resize to fixed size
        img = img.flatten()  # Flatten to a 1D vector
        X.append(img)
        y.append(label)
 
# Convert to NumPy arrays
X = np.array(X)
y = np.array(y)
 
# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
 
# Train a model
model = SVC(kernel='linear', probability=True)  # Support Vector Classifier
model.fit(X_train, y_train)
 
# Evaluate the model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model accuracy: {accuracy * 100:.2f}%")
 
# Save the model
dump(model, 'skin_disease_model.joblib')
print("Model saved as skin_disease_model.joblib")
 
views.py
 
import base64
from django.shortcuts import render,redirect,HttpResponseRedirect # type: ignore
from django.contrib.auth.forms import AuthenticationForm,UserCreationForm # type: ignore
from django.contrib.auth import authenticate # type: ignore
from django.core.files.storage import FileSystemStorage # type: ignore
from joblib import load
import cv2
import numpy as np
 
 
model = load('skin_disease_model.joblib')
 
# Create your views here.
def home(request):
    return render(request,'index.html')
 
def login(request):
    if(request.user.is_authenticated):
        return render(request,'login.html')
    if(request.method == "POST"):
        un = request.POST['username']
        pw = request.POST['password']
        #authenticate() is used to check for the values present in the database or not
        #if the values are matched, then it will return the username
        #if the values are not matched, then it will return as 'None'
        # use authenticate(), need to import it from auth package
        user = authenticate(request,username=un,password=pw)
        if(user is not None):
            return redirect('/profile')
        else:
            msg = 'Invalid Username/Password'
            form = AuthenticationForm(request.POST)
            return render(request,'login.html',{'form':form,'msg':msg})
    else:
        form = AuthenticationForm()
        #used to create a basic login page with username and password
        return render(request,'login.html',{'form':form})
# def login(request):
#     if(request.user.is_authenticated):
#         return redirect('/login')
#     if(request.method == "POST"):
#         un = request.POST['username']
#         pw = request.POST['password']
#         user = authenticate(request,username=un,password=pw)
#         if(user is not None):
#             return redirect('/profile')
#         else:
#             msg = 'Invalid Username/Password'
#             return render(request,'login.html',{'msg':msg})
#     else:
        # return render(request,'login.html')
 
def register(request):
    if(request.user.is_authenticated):
        return redirect('/')
    if(request.method == "POST"):
        form = UserCreationForm(request.POST)
        if(form.is_valid()):
            form.save()
            un = form.cleaned_data.get('username')
            pw = form.cleaned_data.get('password1')
            authenticate(username=un,password=pw)
            return redirect('/login')
    else:
        form = UserCreationForm()
        #UserCreationForm() is used to create a basic registration page with username, password and confirm password
        return render(request,'register.html',{'form':form})
 
# def register(request):
#     if(request.user.is_authenticated):
#         return redirect('/')
#     if(request.method == "POST"):
#         un = request.POST['username']
#         pw1 = request.POST['password']
#         pw2 = request.POST['confirmPassword']
#         user = authenticate(request,username=un)
#         print(user)
#         if(user is None):
#             if(pw1==pw2):
#                 authenticate(username=un,password=pw1)
#                 return redirect('/login')
#             else:
#                 msg = 'Incorrect password!'
#                 return render(request,'register.html',{'msg':msg})
#         else:
#             msg = 'User already registered!'
#             return render(request,'register.html',{'msg':msg})
#     else:
#         return render(request,'register.html')
   
def profile(request):
    # if(request.method=="POST"):
    #     if(request.FILES.get('uploadImage')):
    #         img_name = request.FILES['uploadImage'].read()
    #         encode = base64.b64encode(img_name).decode('utf-8')
    #         img_url = f"data:image/jpeg;base64,{encode}"
    #         return render(request,'profile.html',{'img':img_url})
    # else:
    #     return render(request,'profile.html')
    if(request.method=="POST"):
        if(request.FILES.get('uploadImage')):
            img_name = request.FILES['uploadImage']
            # create a variable for our FileSystem package
            fs = FileSystemStorage()
            filename = fs.save(img_name.name,img_name)
            #urls
            img_url = fs.url(filename)
            #find the path of the image
            img_path = fs.path(filename)
 
            #start implementing the opencv condition
            img = cv2.imread(img_path,cv2.IMREAD_COLOR)
            #resize the image for a constant use
            img = cv2.resize(img,(64,64))
            #flatten the image for the better clear shape of the disease spread on the skin
            img = img.flatten()
            #using the normalization predefined function to find the value
            img = np.expand_dims(img,axis=0)
 
            #we sill start executing with our model
            predict = model.predict(img)[0]
 
            skin_disease_names = ['Cellulitis','Impetigo','Athlete Foot','Nail Fungus','Ringworm','Cutaneous Larva Migrans','Chickenpox','Shingles']
            diagnosis = ['']
 
            result1 = skin_disease_names[predict]
            result2 = diagnosis[predict]
 
            return render(request,'profile.html',{'img':img_url,'obj1':result1,'obj2':result2})
    else:
        return render(request,'profile.html')
 

profile.html
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Welcome to Skin Disease Finding Web App!!!</h1>
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        Image Upload: <input type="file" name="uploadImage"><br>
        <button type="submit">Submit</button>
    </form>
    <hr>
    <div>
        {% if img %}
            <img src="{{img}}" alt="No Image loaded" height="500px" width="500px">
        {% endif %}
    </div>
    <hr>
    <div>
        <h2>Skin Disease Result:</h2>
        {% if obj1 %}
        <h3>{{ obj1 }}</h3>
        {% endif %}
    </div>
    <hr>
    <div>
        <h2>Diagnosis Result:</h2>
        {% if obj2 %}
            <h3>{{ obj2 }}</h3>
        {% endif %}
    </div>
</body>
</html>



22nd November, 2024


--> What do we do on 27th and 28th to externals

you need to present the PPT, explain it and show the output of our project from the start. Like, home page, registration page, login page, profile page and image upload to output.
 
explain detailed about the models and technologies we have used


Try to complete the below mentioned task before monday:
 
1. Complete the project and upload it in github
2. Complete the PPT by adding the output screenshot and milestone 4 updates and again upload that also in the same github repository
3. Make yourself available for next week atleast for 15-20 mins presentation.





27th November, 2024

#Everyone
 
1) Everyone should push your project and ppt in GitHub
2) Team should have minimum 18 slide in your ppt.
3) In team one member should explain whole thing about the project(PPT).
4) Minimum 30 mints should give your demo 
 
 
Be ready for the Demo...
 
 
All the Best..
 
Thankyou All 